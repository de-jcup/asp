/* ============================================================================
   This file contains the configurations for 
   Maven settings
   ============================================================================
   
   Included from: "${rootProject.projectDir}/build.gradle"
   ============================================================================
 */
 
def ossrhPassword = System.getenv('OSSRH_PASSWORD')
if (ossrhPassword==null){
    throw new IllegalArgumentException("OSSRH_PASSWORD not set")
}

def ossrhUsername = System.getenv('OSSRH_USERNAME')
if (ossrhUsername==null){
    throw new IllegalArgumentException("OSSRH_USERNAME not set")
} 
 
 
allprojects{
	/* define repositories*/
	repositories {
		/* add your local maven repo - so you can deploy there */
		mavenLocal() 
		/* add maven central */
		mavenCentral()
		/* add sonatype as well */
//		maven {
//		  url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//		  credentials{
//		      username "$ossrhUsername"
//		      password "$ossrhPassword"
//		  }
//		}
	}
}

def distVersion="1.3.0"

subprojects {
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'maven-publish'
	
	group = "de.jcup"
	version = "${distVersion}"
	/* Continous integration part - use build number in version when 'ci.buildNumber' is set*/
	def buildNr = System.getenv('ci.buildNumber')
  	if (buildNr != null && ! buildNr.isEmpty()){
		version= version + "_"+buildNr
	}

    
    /**
     * Task to create source jars
     */
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    /**
     * Task to create javadoc jars
     */
    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
    /**
     * Define artifacts
     */
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    
    signing {
        sign configurations.archives
    }
    
    
	if (! projectType.mavenCentralDistUploads.contains(project)){
        return;
    }

    apply plugin: 'maven-publish'

    uploadArchives {
          repositories {
            mavenDeployer {
             
              beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        
              repository(url: "https://s01.oss.sonatype.org/content/groups/staging/") {
                 authentication(userName: ossrhUsername, password: ossrhPassword)
              }
        
              snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                 authentication(userName: ossrhUsername, password: ossrhPassword)
              }
        
              pom.project {
                name 'ASP'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'ASP is an acronym and stands for Asciidoc Server Protocol and represents a Asciidoc instance which is based on AsciidoctorJ providing a simple but secure communication layer/protocoll. '
                url 'https://github.com/de-jcup/asp'
        
                scm {
                  connection 'scm:git:https://github.com/de-jcup/asp.git'
                  developerConnection 'https://github.com/de-jcup/asp.git'
                  url 'https://github.com/de-jcup/asp'
                }
        
                licenses {
                  license {
                    name 'The Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                  }
                }
        
                developers {
                  developer {
                    id 'de-jcup'
                    name 'Albert Tregnaghi'
                    email 'albert.tregnaghi@jcup.de'
                  }
                }
              }
            }
          }
        }
    
    
    
}
