/* ============================================================================
   This file contains the configurations for 
   Maven settings
   ============================================================================
   
   Included from: "${rootProject.projectDir}/build.gradle"
   ============================================================================
 */
allprojects{
	/* define repositories*/
	repositories {
		/* add your local maven repo - so you can deploy there */
		mavenLocal() 
		/* add maven central */
		mavenCentral()
	}
}

def distVersion="1.1.1"

subprojects {
	apply plugin: 'maven'
	apply plugin: 'signing'
	
	group = "de.jcup.asp"
	version = "${distVersion}"
//	archivesBaseName = "asp"
	/* Continous integration part - use build number in version when 'ci.buildNumber' is set*/
	def buildNr = System.getenv('ci.buildNumber')
  	if (buildNr != null && ! buildNr.isEmpty()){
		version= version + "_"+buildNr
	}

    /**
     * Task to create source jars
     */
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    /**
     * Task to create javadoc jars
     */
    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
    /**
     * Define artifacts
     */
    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        sign configurations.archives
    }
    
	if (! projectType.mavenCentralDistUploads.contains(project)){
        return;
    }
    
    apply plugin: 'maven-publish'
    // https://central.sonatype.org/publish/publish-gradle/
    
    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    
          repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }
    
          snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }
    
          pom.project {
            name 'ASP'
            packaging 'jar'
            // optionally artifactId can be defined here
            description 'Asciidoctor server protocol project. The project provides an '+
                        'ASP server and also an ASP java client library to communicate. '+
                        'The purpose of the project is to have all AsciiDoctorJ '+
                        'dependencies inside an ASP server runining inside own JVM. So '+
                        'client systems wanting to render asciidoc do no longer need to '+
                        'have those dependencies. Main '
            url 'https://github.com/de-jcup/asp'
    
            scm {
              connection 'https://github.com/de-jcup/asp.git'
              developerConnection 'https://github.com/de-jcup/asp.git'
              url 'https://github.com/de-jcup/asp'
            }
    
            licenses {
              license {
                name 'The Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              }
            }
    
            developers {
              developer {
                id 'de-jcup'
                name 'Albert Tregnaghi'
                email 'albert.tregnaghi@jcup.de'
              }
            }
          }
        }
      }
}
    
}
