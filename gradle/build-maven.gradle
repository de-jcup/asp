/* ============================================================================
   This file contains the configurations for 
   Maven settings
   ============================================================================
   
   Included from: "${rootProject.projectDir}/build.gradle"
   ============================================================================
 */

def distVersion="1.4.0"
 
def ossrhUsername = System.getenv('OSSRH_USERNAME')
def ossrhPassword = System.getenv('OSSRH_PASSWORD')

def signingActivated = hasProperty('signing.password')


 
allprojects{
    /* define repositories*/
    repositories {
        /* add your local maven repo - so you can deploy there */
        mavenLocal() 
        /* add maven central */
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'
    
    group = "de.jcup.asp"
    version = "${distVersion}"
    
    /**
     * Task to create source jars
     */
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    /**
     * Task to create javadoc jars
     */
    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
    /**
     * Define artifacts
     */
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    
    if (signingActivated) {
        signing {
            sign configurations.archives
        }
    }
    
    if (projectType.notMavenCentralProjects.contains(project)){
        return;
    }

    apply plugin: 'maven-publish'
    
    // the GAV of the generated POM can be set here
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }

    uploadArchives {
    
          repositories {
            mavenDeployer {
             
              beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        
              repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                 authentication(userName: ossrhUsername, password: ossrhPassword)
              }
        
              snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                 authentication(userName: ossrhUsername, password: ossrhPassword)
              }
        
              pom.project {
                name 'ASP'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'ASP is an acronym and stands for Asciidoc Server Protocol and represents a Asciidoc instance which is based on AsciidoctorJ providing a simple but secure communication layer/protocoll. '
                url 'https://github.com/de-jcup/asp'
        
                scm {
                  connection 'scm:git:https://github.com/de-jcup/asp.git'
                  developerConnection 'https://github.com/de-jcup/asp.git'
                  url 'https://github.com/de-jcup/asp'
                }
        
                licenses {
                  license {
                    name 'The Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                  }
                }
        
                developers {
                  developer {
                    id 'de-jcup'
                    name 'Albert Tregnaghi'
                    email 'albert.tregnaghi@jcup.de'
                  }
                }
              }
            }
          }
        }
    
    
    task checkCredentialsSet{
        doFirst {
            if (ossrhPassword==null){
                throw new IllegalArgumentException("OSSRH_PASSWORD not set")
            }
            
            if (ossrhUsername==null){
                throw new IllegalArgumentException("OSSRH_USERNAME not set")
            } 
            
            if (! signingActivated) {
                throw new IllegalArgumentException("signing.password property not set, but necessary!")
            }
        }

    }
    
    tasks.uploadArchives.dependsOn("checkCredentialsSet")   
}
