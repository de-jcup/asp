// SPDX-License-Identifier: MIT
/* ============================================================================
   This file contains the configurations for
   common test report creation
   ============================================================================

   Included from: "${rootProject.projectDir}/build.gradle"
   ============================================================================
 */

// createCombinedTestReportZipfile
//   depOn->cleanUpAfterTestReportZipfileCreated
//      depOn->createCombinedTestReport (DELETE)
//         depOn->internalCreateCombinedTestReportZipfile (ZIP)
//            depOn->createCombinedTestReport
//               depOn->subprojects.copyTestResults (COPY)
//                  depOn->asp-integrationtest:copyIntegrationTestResults
ext{

 combined_report_target="${rootProject.projectDir}/build/reports/combined-report"
 combined_report_tmp="${rootProject.projectDir}/build/reports/allTests-tmp"
 combined_report_junit_tmp="${combined_report_tmp}/junit"
}

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;


public class JunitFilesToOneFileConverter {

    void combineFiles(String sourcePath, String targetFile) {
        StringBuilder sb = new StringBuilder();
        sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
        sb.append("<testsuites>\n");
        Path path = Paths.get(sourcePath);
        try {
            for (Path file : Files.newDirectoryStream(path)) {
                if (Files.isRegularFile(file)) {
                    try {
                        List<String> x = Files.readAllLines(file);
                        int lineNr = 0;
                        for (String line : x) {
                            lineNr++;
                            if (lineNr == 1) {
                                continue;
                            }
                            sb.append(line);
                            sb.append("\n");
                        }

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
            sb.append("\n</testsuites>");
            Path targetPath = Paths.get(targetFile);
            targetPath.getParent().toFile().mkdirs();
            Files.deleteIfExists(targetPath);

            BufferedWriter bw = Files.newBufferedWriter(targetPath, Charset.forName("UTF-8"), StandardOpenOption.CREATE_NEW)
            bw.write(sb.toString());
            bw.close();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}


///apply from '${rootProject.projectDir}/gradle/JunitFilesToOneFileConverter.groovy'

subprojects{
    
    def copyFrom = "${project.projectDir}/build/test-results"
    
    if (project.name.equals("asp-integrationtest")){
        copyFrom = "${copyFrom}/fullintegrationtest"
    }else{
        copyFrom = "${copyFrom}/test"
    }
    
    task copyTestResults(type: Copy) {
        with{
            from "${copyFrom}"
            into "${combined_report_junit_tmp}"
            include "*.xml"
        }
    }

}

task createCombinedTestReport(dependsOn: subprojects.copyTestResults) {
}
   
task internalCreateCombinedTestReportZipfile(type: Zip, dependsOn: createCombinedTestReport) {
        /* zip file */
        archiveFileName = "combined-sechub-testreport.zip"
        destinationDirectory = file("${rootProject.projectDir}/build/archive")

        from "${combined_report_target}"
}

task cleanUpAfterTestReportZipfileCreated(type: Delete, dependsOn: internalCreateCombinedTestReportZipfile) {
    delete "${combined_report_tmp}","${combined_report_target}" 
}

 /* when not at github actions, we can use this to get same zip file */
task createCombinedTestReportZipfile( dependsOn: cleanUpAfterTestReportZipfileCreated) {
    group 'sechub'
    description = 'creates a zip file containing integration test logs and one test results'
}

project('asp-integrationtest'){
    createCombinedTestReport {
        doLast {
            File tmpFolder = new File("${rootProject.projectDir}/build/reports/allTests-tmp/junit");
            if (! tmpFolder.exists()){
                return;
            }
            new JunitFilesToOneFileConverter().combineFiles("${combined_report_junit_tmp}", "${combined_report_target}/junit-results-exported.xml");
        }

    }
}
/* own clean task - we need this because root project has not included a module providing the task */
task internalCleanRootBuildFolder(type: Delete){

    doFirst {
        def rootBuildFolder = file("${project.projectDir}/build")
        if (! rootBuildFolder.exists()){
            rootBuildFolder.mkdirs();
        } 
        delete rootBuildFolder.listFiles() // so we do NOT clear buildSrc/build here!
    }

}

tasks.clean.dependsOn.internalCleanRootBuildFolder
